# -*- coding: utf-8 -*-
"""training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t1GpEhxyqwfbYW9doNtbJTsR8oAYFXI5
"""

!pip install -q streamlit
!pip install -q pyngrok
!pip install -q ydata-profiling
!pip install -q sweetviz

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import sklearn
import statsmodels.api as sm
import sweetviz as sv
import http.server
import socketserver
from pyngrok import ngrok
import threading
import warnings
warnings.filterwarnings('ignore')
import statsmodels.api as sm


from sklearn.linear_model import LassoCV
from sklearn import neighbors
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import LinearRegression, LogisticRegression, Ridge, RidgeCV, Lasso, LassoCV
from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error, roc_curve, auc
from sklearn.metrics import classification_report, mean_squared_error, r2_score
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, PolynomialFeatures, StandardScaler
from ydata_profiling import ProfileReport


from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.stattools import durbin_watson
from statsmodels.tools.tools import add_constant

link = "https://drive.google.com/uc?id=1jtzs5MlKEm3tmm1axj_7RQqP3jjzI1XW"
df = pd.read_csv(link)

pd.set_option('display.max_columns', 500)

df.head(40)

logistic_model = LogisticRegression(random_state=42)
logistic_model.fit(X_train, y_train)

y_pred_logistic = logistic_model.predict(X_test)
logistic_accuracy = accuracy_score(y_test, y_pred_logistic)
logistic_f1 = f1_score(y_test, y_pred_logistic)
logistic_cm = confusion_matrix(y_test, y_pred_logistic)
print("Logistic Regression Results:")
print(classification_report(y_test, y_pred_logistic))
ConfusionMatrixDisplay(logistic_cm, display_labels=logistic_model.classes_).plot(cmap='Blues')
plt.title('Confusion Matrix: Logistic Regression')
plt.show()

knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)

y_pred_knn = knn_model.predict(X_test)
knn_accuracy = accuracy_score(y_test, y_pred_knn)
knn_f1 = f1_score(y_test, y_pred_knn)
knn_cm = confusion_matrix(y_test, y_pred_knn)
print("KNN Results:")
print(classification_report(y_test, y_pred_knn))
ConfusionMatrixDisplay(knn_cm, display_labels=knn_model.classes_).plot(cmap='Blues')
plt.title('Confusion Matrix: KNN')
plt.show()

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, y_pred_rf)
rf_f1 = f1_score(y_test, y_pred_rf)
rf_cm = confusion_matrix(y_test, y_pred_rf)
print("Random Forest Results:")
print(classification_report(y_test, y_pred_rf))
ConfusionMatrixDisplay(rf_cm, display_labels=rf_model.classes_).plot(cmap='Blues')
plt.title('Confusion Matrix: Random Forest')
plt.show()

models = ['Logistic Regression', 'KNN', 'Random Forest']
accuracies = [logistic_accuracy, knn_accuracy, rf_accuracy]

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.barplot(x=models, y=accuracies, palette='coolwarm')
plt.title('Compare the accuracy of the models')
plt.xlabel('The models')
plt.ylabel('Accuracy')
plt.ylim(0, 1)

print(f"\nLogistic Regression Accuracy: {logistic_accuracy:.2f}")
print(f" KNN Accuracy: {knn_accuracy:.2f}")
print(f"Random Forest Accuracy: {rf_accuracy:.2f}")

f1_scores = [logistic_f1, knn_f1, rf_f1]
plt.subplot(1, 2, 2)
sns.barplot(x=models, y=f1_scores, palette='coolwarm')
plt.title('Compare F1 Score of models')
plt.xlabel('The models')
plt.ylabel('F1 Score')
plt.ylim(0, 1)
plt.tight_layout()
plt.show()

print(f"\nLogistic Regression F1 Score Accuracy: {logistic_f1:.2f}")
print(f"KNN F1 Score Accuracy: {knn_f1:.2f}")
print(f"Random Forest F1 Score Accuracy: {rf_f1:.2f}")

