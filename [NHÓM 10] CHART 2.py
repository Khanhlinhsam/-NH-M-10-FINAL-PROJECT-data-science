# -*- coding: utf-8 -*-
"""chartbm1-5 fixx.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aUyaqwIiVnOZaXF02Cacy0rTEvjRcF0U
"""

!pip install -q streamlit
!pip install -q pyngrok
!pip install -q ydata-profiling
!pip install -q sweetviz

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import sklearn
import statsmodels.api as sm
import sweetviz as sv
import http.server
import socketserver
from pyngrok import ngrok
import threading
import warnings
warnings.filterwarnings('ignore')

from ydata_profiling import ProfileReport


from sklearn import neighbors
from sklearn.linear_model import LinearRegression, LogisticRegression, Ridge, RidgeCV, Lasso, LassoCV
from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error, roc_curve, auc
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, PolynomialFeatures, StandardScaler

from sklearn.metrics import mean_squared_error, r2_score


from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.stattools import durbin_watson
from statsmodels.tools.tools import add_constant

link = "https://drive.google.com/uc?id=1jtzs5MlKEm3tmm1axj_7RQqP3jjzI1XW"
df = pd.read_csv(link)

pd.set_option('display.max_columns', 500)
df['salary'] = df['salary'].fillna(0)
df.head(40)

df1 = df[df['salary'] > 0]

plt.scatter(df1['salary'], df1['degree_p'], color='blue', label='degree_p')
plt.scatter(df1['salary'], df1['etest_p'], color='orange', label='etest_p')

degree_slope, degree_intercept = np.polyfit(df1['salary'], df1['degree_p'], 1)
etest_slope, etest_intercept = np.polyfit(df1['salary'], df1['etest_p'], 1)
plt.plot(df1['salary'], degree_slope * df1['salary'] + degree_intercept, '--', color='blue', label='Linear (degree_p)')
plt.plot(df1['salary'], etest_slope * df1['salary'] + etest_intercept, '--', color='red', label='Linear (etest_p)')

plt.title('degree_p, etest_p vs salary')
plt.xlabel('Salary')
plt.ylabel('Percentage Scores')
plt.legend()
plt.show()

df1.boxplot(column='salary', by='workex')
plt.title('workex salary')
plt.xlabel('Work Experience')
plt.ylabel('Salary')
plt.show()

df2 = df1.dropna(subset=['degree_p', 'salary'])

average_salaries = df2.groupby('degree_p', as_index=False)['salary'].mean()

plt.figure(figsize=(20, 9))
plt.scatter(df2['degree_p'], df2['salary'], color='green', s=10, label='Data Points')
plt.plot(average_salaries['degree_p'], average_salaries['salary'], color='red', label='Trend Line')

plt.xlabel("degree_p (Degree Percentage)")
plt.ylabel("Salary")
plt.title("degree_p vs Salary (with Trend Line)")
plt.legend()
plt.grid(True)
plt.show()

plt.scatter(df2['etest_p'], df2['salary'], color='green', s=10, label='Data Points')

plt.xlabel("etest_p (Degree Percentage)")
plt.ylabel("Salary")
plt.title("etest_p  vs Salary")
plt.legend()
plt.grid(True)
plt.show()

plt.scatter(df2['degree_p'], df2['salary'], color='green', s=10, label='Data Points')

plt.xlabel("degree_p (Degree Percentage)")
plt.ylabel("Salary")
plt.title("degree_p vs Salary")
plt.legend()
plt.grid(True)
plt.show()

avg_salary = df1.groupby(['workex', 'specialisation'])['salary'].mean().reset_index()

pivot_data = avg_salary.pivot(index='workex', columns='specialisation', values='salary')

plt.figure(figsize=(8, 6))
pivot_data.plot(kind='bar', figsize=(8, 6), edgecolor='black')
plt.title("Average salary based on work experience in 2 majors")
plt.xlabel("Working experience")
plt.ylabel("AVR salary")
plt.xticks(rotation=0)
plt.legend(title="Specialisation", labels=["Mkt&Fin", "Mkt&HR"])
plt.grid(True)
plt.show()

