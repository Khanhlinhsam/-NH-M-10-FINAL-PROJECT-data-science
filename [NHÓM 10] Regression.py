# -*- coding: utf-8 -*-
"""Untitled1 (3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iEINbvpEaWMRWGflDsIma3PSBI5TzDXX

# Các yếu tố nào như điểm số học tập, kinh nghiệm làm việc, loại bằng cấp, chuyên ngành MBA, và điểm đánh giá kỹ năng (etest_p) có thể giúp dự đoán mức lương của sinh viên sau khi được tuyển dụng?
"""

!pip install -q streamlit
!pip install -q pyngrok
!pip install -q ydata-profiling
!pip install -q sweetviz

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import sklearn
import statsmodels.api as sm
import sweetviz as sv
import http.server
import socketserver
from pyngrok import ngrok
import threading
import warnings
warnings.filterwarnings('ignore')

from ydata_profiling import ProfileReport


from sklearn import neighbors
from sklearn.linear_model import LinearRegression, LogisticRegression, Ridge, RidgeCV, Lasso, LassoCV
from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error, roc_curve, auc
from sklearn.metrics import classification_report
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, PolynomialFeatures, StandardScaler

from sklearn.metrics import mean_squared_error, r2_score


from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.stattools import durbin_watson
from statsmodels.tools.tools import add_constant

link = "https://drive.google.com/uc?id=1jtzs5MlKEm3tmm1axj_7RQqP3jjzI1XW"
df = pd.read_csv(link)

pd.set_option('display.max_columns', 500)
df['salary'] = df['salary'].fillna(0)
df.head(40)

dfdm = pd.get_dummies(df, columns=['gender', 'ssc_b', 'hsc_b', 'hsc_s', 'degree_t', 'workex', 'specialisation', 'status'], drop_first=True)

dfdm.head()

est = LinearRegression(fit_intercept=True)
features = ['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p', 'workex_Yes']

x2 = dfdm[features]
y2 = dfdm['salary']
est.fit(x2,y2)
print("The cofficient(s) a is(are)",est.coef_)
print("The intercept b is", est.intercept_)

testperc=0.2
X_train2, X_test2, y_train2, y_test2 = train_test_split(x2, y2, test_size = testperc, random_state = 0)
est = LinearRegression(fit_intercept=True)
est.fit(pd.DataFrame(X_train2),pd.DataFrame(y_train2))

print("The cofficient(s) a is(are)",est.coef_)
print("The intercept b is", est.intercept_)
print("The R^2 value (testing data) is", est.score(pd.DataFrame(X_test2),pd.DataFrame(y_test2)))

print(X_train2.dtypes)

print(y_train2.dtypes)
X_train2['workex_Yes'] = X_train2['workex_Yes'].astype(float)

X_train3 = sm.add_constant(X_train2)
model = sm.OLS(y_train2,X_train3)
results = model.fit()
results.summary()

y_train_pred = est.predict(X_train2)
y_test_pred = est.predict(X_test2)

mse_train = mean_squared_error(y_train2, y_train_pred)
mse_test = mean_squared_error(y_test2, y_test_pred)

mse_train, mse_test

"""$R^2>=0.3$ then the model linear relationship is moderate.

LASSO
"""

x3 = dfdm[['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p', 'workex_Yes']]
y2 = dfdm['salary']
x3.corr()
sns.heatmap(x3.corr(),annot=True)

"""ssc_p và hsc_p có hệ số tương quan 0.51: Tương quan dương trung bình, tức là điểm trung học cơ sở (ssc_p) và điểm trung học phổ thông (hsc_p) có mối quan hệ dương.

ssc_p và workex_Yes có hệ số tương quan 0.18: Tương quan dương rất yếu, tức là điểm trung học cơ sở (ssc_p) gần như không liên quan đến việc có kinh nghiệm làm việc (workex_Yes).

etest_p và degree_p có hệ số tương quan 0.22: Mối tương quan dương yếu.
ssc_p và degree_p có hệ số tương quan 0.54: Một mối quan hệ dương trung bình, nghĩa là điểm trung học cơ sở có xu hướng liên quan đến điểm đại học ở mức vừa phải.

etest_p và workex_Yes có hệ số tương quan 0.057: Gần như không có mối tương quan tuyến tính.

"""

print(df.columns)

print(dfdm[features].dtypes)
dfdm['workex_Yes'] = dfdm['workex_Yes'].astype(float)

from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant

def compute_vif(considered_features):

    X = dfdm[considered_features]
    X['intercept'] = 1

    vif = pd.DataFrame()
    vif["Variable"] = X.columns
    vif["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
    vif = vif[vif['Variable']!='intercept']
    return vif


features = ['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p', 'workex_Yes']
compute_vif(features).sort_values('VIF', ascending=False)

X4 = dfdm[['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p', 'workex_Yes']]
y4 = dfdm['salary']

X4 = sm.add_constant(X4)

model = sm.OLS(y4, X4).fit()
print(model.summary())

from sklearn.model_selection import train_test_split
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression

y4 = dfdm['salary']
X4 = dfdm[['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p', 'workex_Yes']]

testperc=0.3
X_train5, X_test5, y_train5, y_test5 = train_test_split(X4, y4, test_size = testperc, random_state = 0)
est = LinearRegression(fit_intercept=True)
est.fit(pd.DataFrame(X_train5),pd.DataFrame(y_train5))

print("The cofficient(s) b is(are)",est.coef_)
print("The intercept a is", est.intercept_)

X_train5 = sm.add_constant(X_train5) # This adds an intercept
model = sm.OLS(y_train5,X_train5)
results = model.fit()
results.summary()

y4 = dfdm['salary']
X4 = dfdm[['ssc_p', 'hsc_p', 'degree_p', 'mba_p', 'workex_Yes']]

testperc=0.3
X_train5, X_test5, y_train5, y_test5 = train_test_split(X4, y4, test_size = testperc, random_state = 0)
est = LinearRegression(fit_intercept=True)
est.fit(pd.DataFrame(X_train5),pd.DataFrame(y_train5))

print("The cofficient(s) b is(are)",est.coef_)
print("The intercept a is", est.intercept_)

X_train5 = sm.add_constant(X_train5) # This adds an intercept
model = sm.OLS(y_train5,X_train5)
results = model.fit()
results.summary()

y4 = dfdm['salary']
X4 = dfdm[['ssc_p', 'hsc_p', 'mba_p', 'workex_Yes']]

testperc=0.3
X_train5, X_test5, y_train5, y_test5 = train_test_split(X4, y4, test_size = testperc, random_state = 0)
est = LinearRegression(fit_intercept=True)
est.fit(pd.DataFrame(X_train5),pd.DataFrame(y_train5))

print("The cofficient(s) b is(are)",est.coef_)
print("The intercept a is", est.intercept_)

X_train5 = sm.add_constant(X_train5) # This adds an intercept
model = sm.OLS(y_train5,X_train5)
results = model.fit()
results.summary()

y4 = dfdm['salary']
X4 = dfdm[['ssc_p', 'hsc_p', 'workex_Yes']]

testperc=0.3
X_train5, X_test5, y_train5, y_test5 = train_test_split(X4, y4, test_size = testperc, random_state = 0)
est = LinearRegression(fit_intercept=True)
est.fit(pd.DataFrame(X_train5),pd.DataFrame(y_train5))

print("The cofficient(s) b is(are)",est.coef_)
print("The intercept a is", est.intercept_)

X_train5 = sm.add_constant(X_train5) # This adds an intercept
model = sm.OLS(y_train5,X_train5)
results = model.fit()
results.summary()

"""Biến ssc_p,hsc_p,workex_Yes là yếu tố duy nhất có ý nghĩa thống kê với mức tin cậy 95%.

"""

ylasso = dfdm['salary']
Xlasso = dfdm[['ssc_p', 'hsc_p', 'degree_p', 'mba_p', 'workex_Yes']]

testperc=0.3
X_train6, X_test6, y_train6, y_test6 = train_test_split(Xlasso, ylasso, test_size = testperc, random_state = 0)

# Prepare and fit the model
lasso_model = Lasso(alpha=0.01)
lasso_model.fit(X_train6, y_train6)
print("Lasso Coefficients: ", lasso_model.coef_)

# Predict the test set and evaluate using MSE
y_pred = lasso_model.predict(X_test6)
mse = mean_squared_error(y_test6, y_pred)
print("Mean Squared Error (test): ", mse)

y_pred5 = lasso_model.predict(X_train6)
mse2 = mean_squared_error(y_train6, y_pred5)
print("Mean Squared Error (train): ", mse2)

scaler = StandardScaler()
Xlasso_scaled = scaler.fit_transform(Xlasso)

X_train6_scaled, X_test6_scaled, y_train6, y_test6 = train_test_split(Xlasso_scaled, ylasso, test_size=0.3, random_state=0)

lasso_cv = LassoCV(alphas=[0.0001, 0.001, 0.01, 0.1, 1, 10, 50], cv=10, random_state=0)
lasso_cv.fit(X_train6_scaled, y_train6)

best_alpha = lasso_cv.alpha_
lasso_coefficients = lasso_cv.coef_
print(lasso_cv.alpha_)
print(lasso_cv.coef_)

#metrics
print(lasso_cv.score(X_test6, y_test6))
print(lasso_cv.mse_path_)
y_pred_test = lasso_cv.predict(X_test6_scaled)
y_pred_train = lasso_cv.predict(X_train6_scaled)

mse_test = mean_squared_error(y_test6, y_pred_test)
mse_train = mean_squared_error(y_train6, y_pred_train)
r2_test = r2_score(y_test6, y_pred_test)
r2_train = r2_score(y_train6, y_pred_train)

results = {
    "Best Alpha": best_alpha,
    "Coefficients": lasso_coefficients,
    "MSE Train": mse_train,
    "MSE Test": mse_test,
    "R2 Train": r2_train,
    "R2 Test": r2_test,
}

results

"""**RIDGE**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge, RidgeCV
from sklearn.metrics import mean_squared_error

yr = dfdm['salary']
Xr = dfdm[['ssc_p', 'hsc_p', 'degree_p', 'mba_p', 'workex_Yes']]

testperc=0.3
X_trainr, X_testr, y_trainr, y_testr = train_test_split(Xr, yr, test_size = testperc, random_state = 0)

# Prepare and fit the model
ridgeReg = Ridge(alpha=5)
ridgeReg.fit(X_trainr,y_trainr)
print("Ridge Coefficients: ", lasso_model.coef_)

# Predict the test set and evaluate using MSE
y_predr = ridgeReg.predict(X_testr)
mse = mean_squared_error(y_testr, y_predr)
print("Mean Squared Error (test): ", mse)

y_predr3 = ridgeReg.predict(X_trainr)
mse2 = mean_squared_error(y_trainr, y_predr3)
print("Mean Squared Error (train): ", mse2)

from sklearn.linear_model import RidgeCV
ridge_cv = RidgeCV(alphas = [0.1,1,2,5,10],cv=5).fit(X_trainr, y_trainr.to_numpy().ravel())

#best alpha
print(ridge_cv.alpha_)
print(ridge_cv.coef_)

#metrics
print(ridge_cv.score(X_testr, y_testr))

